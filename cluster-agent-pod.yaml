apiVersion: v1
kind: Pod
metadata:
  name: cluster-agent-0
  namespace: default
  labels:
    app: cluster-agent
spec:
  containers:
  - name: cluster-agent
    image: 080137407410.dkr.ecr.us-west-2.amazonaws.com/edge-orch/infra/enic:0.8.4
    imagePullPolicy: IfNotPresent
    env:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    ports:
    - containerPort: 8080
    - containerPort: 5991
    - containerPort: 22
    command: ["/bin/bash"]
    args: 
    - "-c"
    - |
      echo "Installing and configuring cluster-agent..."
      
      # Install cluster-agent package
      dpkg -i /var/cache/apt/archives/cluster-agent_*.deb || apt-get install -f -y
      
      # Create configuration directory
      mkdir -p /etc/edge-node/node/confs
      
      # Create cluster-agent configuration pointing to TLS proxy
      cat > /etc/edge-node/node/confs/cluster-agent.yaml << 'CONFIG_EOF'
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

---
version: 'v0.5.0'

# Globally unique identifier for ENiC container
GUID: '12345678-1234-1234-1234-123456789012'

logLevel: 'debug'

# TLS Proxy endpoint (bridges TLS cluster-agent to plaintext Intel provider)
clusterOrchestratorURL: 'grpc-tls-proxy.default.svc.cluster.local:50021'
heartbeat: '10s'

# JWT access token (not needed for test with ALLOW_MISSING_AUTH_CLIENTS=cluster-agent)
jwt:
  accessTokenPath: '/etc/intel_edge_node/tokens/cluster-agent/access_token'
CONFIG_EOF

      echo "Starting cluster-agent service..."
      # Start cluster-agent (the actual gRPC service that will connect to Intel provider)
      /opt/edge-node/bin/cluster-agent &
      
      # Also start SSH service for bootstrap access
      /usr/sbin/sshd -D &
      
      # Keep container alive and show logs
      tail -f /dev/null
    securityContext:
      privileged: true
  restartPolicy: Always
