# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# TLS Termination Proxy for Cluster Agent
# This nginx-based proxy provides TLS termination to bridge the protocol mismatch between:
# - cluster-agent: Expects TLS gRPC connections
# - intel-infra-provider: Provides plain gRPC (no TLS)
# cluster-agent (TLS) → nginx-proxy (TLS termination) → intel-provider (plain gRPC)
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-tls-termination
  namespace: default
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        # Map to convert HTTP Authorization to gRPC metadata
        map $http_authorization $grpc_bearer {
            ~^Bearer\ (.+)$ $1;
            default "";
        }
        
        upstream intel_provider_backend {
            server intel-infra-provider-grpc:50020;
        }
        
        server {
            listen 50021 ssl;
            http2 on;
            
            # TLS configuration
            ssl_certificate /etc/nginx/certs/tls.crt;
            ssl_certificate_key /etc/nginx/certs/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers HIGH:!aNULL:!MD5;
            
            location / {
                # gRPC proxy configuration
                grpc_pass grpc://intel_provider_backend;
                
                # Convert HTTP Authorization header to gRPC metadata
                grpc_set_header bearer $grpc_bearer;
                grpc_set_header client cluster-agent;
                
                # Remove original authorization header to avoid conflicts
                proxy_set_header Authorization "";
            }
        }
    }
  
  generate-certs.sh: |
    #!/bin/sh
    # Generate a simple self-signed certificate with proper settings for gRPC
    openssl req -x509 -newkey rsa:2048 -keyout /certs/tls.key -out /certs/tls.crt -days 365 -nodes \
      -subj "/C=US/ST=Test/L=Test/O=TestOrg/CN=grpc-tls-proxy-simple" \
      -addext "subjectAltName=DNS:grpc-tls-proxy-simple,DNS:grpc-tls-proxy-simple.default,DNS:grpc-tls-proxy-simple.default.svc,DNS:grpc-tls-proxy-simple.default.svc.cluster.local"
    
    chmod 600 /certs/tls.key
    chmod 644 /certs/tls.crt
    
    echo "Certificate generated successfully"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grpc-tls-proxy-simple
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grpc-tls-proxy-simple
  template:
    metadata:
      labels:
        app: grpc-tls-proxy-simple
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10000
        runAsGroup: 10000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: cert-generator
        image: alpine/openssl:3.1.4
        command: ["/bin/sh", "/scripts/generate-certs.sh"]
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10000
          runAsGroup: 10000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: cert-scripts
          mountPath: /scripts
        - name: certs
          mountPath: /certs
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
      containers:
      - name: nginx-tls-proxy
        image: nginx:1.25.3-alpine
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10000
          runAsGroup: 10000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          seccompProfile:
            type: RuntimeDefault
        ports:
        - containerPort: 50021
          name: grpc-tls
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: certs
          mountPath: /etc/nginx/certs
        - name: tmp
          mountPath: /tmp
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: cert-scripts
        configMap:
          name: nginx-tls-termination
          defaultMode: 0755
      - name: nginx-config
        configMap:
          name: nginx-tls-termination
      - name: certs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: var-cache-nginx
        emptyDir: {}
      - name: var-run
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: grpc-tls-proxy-simple
  namespace: default
spec:
  selector:
    app: grpc-tls-proxy-simple
  ports:
  - port: 50021
    targetPort: 50021
    protocol: TCP
  type: ClusterIP
